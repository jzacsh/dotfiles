#!/bin/bash

forest_runtime_dir="$XDG_RUNTIME_DIR"/"$(whoami)".dotfiles.management.d

is_ssh_login() ( jzdots_is_ssh && [[ "$SHLVL" -eq 1 ]]; )

# Help ensure dotfiles for task "$1" only run once per login session.
#
# In the event of an SSH login, we rely on detecting that it's an SSH login heuristically.
# Otherwise, we just keep track of whether we've run before in some runtime files.
#
# $1=subset of dots (e.g. "host")
# [$2]=n: dry-run: Optionally indicate we should NOT make changes
should_skip_forest() (
  set -eou pipefail
  mkdir -p "$forest_runtime_dir"

  local dots_subset="$1"
  local real_run="${2:-R}" # default to real run
  local has_run_semaphore="$forest_runtime_dir"/"$dots_subset"
  if ! is_ssh_login && [[ -r "$has_run_semaphore" ]]; then
    return 0 # _has_ run
  else
    if [[ "$real_run" = R ]];then
      log_jzdots info \
        'dotfile forest not yet run for "%s", running now...\n' "$dots_subset"
      date --iso-8601=ns > "$has_run_semaphore"
    fi
    return 1 # has _not_ run
  fi
)

tree_report() (
  local tree="$1" name="$2"
  local status_tag='S'
  should_skip_forest "$tree" -n || status_tag='R'
  printf '%s[%s]="%s"' "$tree" "$status_tag" "$name"
)

# TODO this is still experimental; no idea if DBUS_SESSION_BUS_ADDRESS is
# really a reliable signal; not sure _which_ signals are really reliable.
# just trying to make sure i don't see useless errors when i login via SSH
# and/or a seated TTY
is_desktop_env() (
  [[ -n "$DISPLAY" ]] && [[ -n "$DBUS_SESSION_BUS_ADDRESS" ]]
)

# useful catalog of some env. variables in this space:
#   https://wiki.archlinux.org/index.php/Environment_variables#Examples
get_desktop_env() (
  local deEnv="$DE"
  [[ -n "$DE" ]] || deEnv="$DESKTOP_SESSION"
  echo "$deEnv"
)

src_this() {
  local target="$1"
  if ! [[ -s "$target" ]] || ! [[ -r "$target" ]] || ! [[ -f "$target" ]];then
    log_jzdots err '%s not readable, non-empty file\n' "$target"
    return # don't error return; don't want to stop my own shell login
  fi
  source "$target"
}

is_same_content() ( diff "$1" "$2" >/dev/null 2>&1; )
is_same_file() ( [[ "$(readlink --canonicalize "$1")" = "$(readlink --canonicalize "$2")" ]]; )

# Ensures a personal dotfile ($1) is used in your system, where you expect ($2).
#
# Ultimately equivalent to `ln -svf "$1" "$2"`. This is utilized by various
# scripts called under `src_all`.
#
# $1 = path to a tracked file in the dotfile forest
# $2 = path to a file somewhere on your system you want to ensure is _actually_
#      just a symlink to $1
host_forest_link() (
  local dotFile="$1" landing="$2" implied="$landing"

  if [[ -L "$landing" ]] && is_same_file "$dotFile" "$landing"; then
    return
  elif [[ -d "$landing" ]]; then
    implied="${landing%/}"/"$(basename "$dotFile")"
    if is_same_file "$dotFile" "$implied"; then
      return
    fi
  fi

  if [[ -s "$implied" ]] && ! is_same_content "$dotFile" "$implied";then
    local backup="$(mktemp --tmpdir=  'host_forest_link_XXXXXXXX.backup')"
    log_jzdots warn 'overwriting target at %s, backup is at %s\n' \
      "$implied" "$backup" >&2
    cp -d -v "$implied" "$backup"
  fi
  ln -svf "$dotFile" "$landing"
)

src_all() {
    local distroSuffix hostSuffix deSuffix domainSuffix

    #
    # generic distro-specific config
    #
    if [[ -f /etc/arch-release ]]; then
      distroSuffix=arch
    elif [[ -f /etc/lsb-release ]]; then
      distroSuffix="$(awk -F'=' '/^DISTRIB_ID/{print tolower($2)}' /etc/lsb-release)"
    elif [[ -f /etc/debian_version ]];then
      distroSuffix=debian
    fi

    #
    # host-specific configuration
    #
    hostSuffix="${HOSTNAME/.*/}" #mimic `hostname -s`

    #
    # DE(GUI)-specific configuration
    #
    if is_desktop_env;then
      deSuffix="$(get_desktop_env)"

      # provide a fallback with some basics that are X11 "specific" but not
      # really DE-specific
      [[ -n "$deSuffix" ]] || deSuffix=jzacshcatchall
    fi

    #
    # domain-specific configuration
    #
    domainSuffix="$(hostname --domain)"

    #
    # actually source everything all at once
    #
    local src_all_pick_dir="$HOME/.host"

    log_jzdots info \
      '~/.host forest-walk: %s\n\t[S=skip, R=try to run];  %s\n' \
       "$(printf '%s, ' \
           "$(tree_report distro "$distroSuffix")" \
           "$(tree_report host "$hostSuffix")"  \
           "$(tree_report deskenv "${deSuffix:-n/a}")" \
           "$(tree_report domain "${domainSuffix:-n/a}")"
       )" \
       "${forest_runtime_dir/$XDG_RUNTIME_DIR/\$XDG_RUNTIME_DIR}"

    cd "$HOME" # allow forest of scripts below to assume a simple $PWD

    should_skip_forest distro ||
      src_this "${src_all_pick_dir}/distro.${distroSuffix}"
    should_skip_forest host ||
      src_this "${src_all_pick_dir}/host.${hostSuffix}"
    { [[ -z "$deSuffix" ]] || should_skip_forest deskenv; } ||
      src_this "${src_all_pick_dir}/deskenv.${deSuffix}"
    { [[ -z "$domainSuffix" ]] || should_skip_forest domain; } ||
      src_this "${src_all_pick_dir}/domain.${domainSuffix}"

    # this should _always_ run
    src_this "${src_all_pick_dir}/host.${hostSuffix}.umask"
}

src_all

# Warn myself if I've not yet `visudo`d to set umask for admin tasks.
if umask | grep --extended-regexp '022$' >/dev/null 2>&1;then
  log_jzdots err \
      'system not yet configured w/sudoer umask & host-specific user-umask\n\t%s\n'  \
      'See comments & instruction in ~/.host/common/umask for more.'
fi

unset src_all src_this should_skip_forest tree_report forest_runtime_dir is_desktop_env get_desktop_env host_forest_link is_same_file is_ssh_login
