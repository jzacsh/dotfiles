#!/usr/bin/env bash
export PATH=$PATH:/opt/java/jre/bin/:/usr/local/go/bin
export PYTHONDOCS=/usr/share/doc/python/html/

export PYTHONVER=3.1
#this breaks dropbox "import site" statement:
#export PYTHONHOME=/usr/lib/python/
export PYTHONPATH=$HOME/bin/lib/python:$PYTHONPATH
export PYTHONSTARTUP=$HOME/.pythonrc.py

alias cower='cower -c'
unalias pdf; alias pdf="zathura"
alias rw='for s in varnish httpd mysqld; do sudo /etc/rc.d/"$s" restart; done'
alias volume="alsamixer"

#file explorer
e() (
    #@TODO: do this for `br` alias.
    if [[ -n $DISPLAY ]];then
        case $DESKTOP_SESSION in
            'DWM')
                $BROWSER
                ;;
            'gnome')
                nautilus --browser
                ;;
            'xfce')
                thunar
                ;;
            *)
        esac
    else
        echo 'No DESKTOP_SESSION found, are you even running X?' >&2
    fi
)

wfls() {
    #
    #system-sanity check:
    #
    #holy shit, took forever... found where my lease was being kept:
    # https://bugs.archlinux.org/task/23282
    local lease='/var/lib/dhcpcd/dhcpcd-*.lease'
    if [[ -e $(echo $lease) ]];then
        printf "WARNING: Looks like you have an stale IP lease hanging around:
            \r%s\n" "$(echo $lease)" >&2
    fi

    #
    # actually start the purpose of this utility
    #

    if (( $# ));then
        if [[ $1 != e && $1 != p && $1 != s ]];then
            echo "
        usage [$0] [e | p | s]
            list broadcasted ESSIDs
            e  listing by encryption
            p  spill all available data to pager
            s  summary of most useful data (essid, strength, mac address).
            " >&2
            return 1
        else
            echo "printing available wifi networks:"
        fi
    fi

    sudo ifconfig wlan0 up
    if [[ $1 = e ]];then
        #encryption table
        local cell=0
        while read stuff; do
            if (( cell == 2 ));then
                cell=0
                echo #readability
            fi
            echo $stuff | grep -i -e encryption -e essid
            (( $? )) || (( ++cell ))
        done < <(sudo iwlist wlan0 scan)
    elif [[ $1 = s ]];then
        sudo iwlist wlan0 scan | grep \
            -e Quality -e Encryption -e ESSID -e Frequency -e Address
    elif [[ $1 = p ]];then
        #show everything, paged.
        sudo iwlist wlan0 scan | $PAGER
    else
        #default behavior for this utility
        sudo iwlist wlan0 scan | grep ESSID | sed -e 's/^[[:space:]]*//g'
    fi
}

wfon() {
    (( $# )) || return 2
    echo "setting a wifi network... '$@'"
    if [[ $1 = '-a' ]];then
        local attr='ap'
        shift
    else
        local attr='essid'
    fi
    sudo iwconfig wlan0 $attr "$@"
}

wfnp() {
    echo "releasing ip..."
    sudo dhcpcd -k wlan0
}

wfip() {
    if [[ $1 = 'f' ]]; then
        echo -en "\t"
        wfnp
    fi
    echo "requesting an IP from dhcpc server..."
    sudo dhcpcd wlan0
}

#alias skype='su skypeuser -c skype'

#relink all shutdown scripts, if necessary:
check_shutdowns() {
    local shutdown_sys='/etc/rc.d/functions.d'
    local shutdown_loc='~/.host/src/distro.arch/shutdown'
    for script in $shutdown_loc/*; do
        local base=$(basename $script)
        if [[ $(diff -u "$script" "${shutdown_sys}/${base}" &>/dev/null) ]];then
            printf "WARNING: '%s' is not installed properly in '%s'." \
                "$base" "$shutdown_sys" >&2
        fi
    done
}

check_shutdowns

#host-specific configs:
ln -sf ~/.host/src/distro.arch/.gtkrc-2.0.mine ~/
ln -sf ~/.host/src/distro.arch/.tmux.conf ~/

# vim: et:ts=4:sw=4
